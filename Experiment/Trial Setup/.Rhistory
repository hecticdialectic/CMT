data= CorrectnessMolten, Fun = c(mean))
colnames(CorrectnessAgg) <- c("Subject", "Condition", "Inducer", "Concurrent", "Comparison",
"Predictor", "Correctness")
ggplot(data= CorrectnessAgg, aes(x=Concurrent, y=Inducer, fill=Correctness)) +
geom_tile(color = "white") +
ggtitle("Proportion of Correct Predictions for each predictor set") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white",
midpoint = 0.5, limit = c(0,1),
name="Proportion of Correct Predictions") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 6))+
theme(axis.text.y = element_text(vjust = 1, hjust = 1, size = 6))+
theme(legend.position = "bottom") +
facet_grid(. ~ Predictor) +
coord_fixed()
View(DataAggTemp)
unique(DataAggTemp$Resp2_SIMULATED.mean)
ggplot(data= CorrectnessAgg, aes(x=Concurrent, y=Inducer, fill=Correctness)) +
geom_tile(color = "white") +
ggtitle("Proportion of Correct Predictions for each predictor set") +
scale_fill_gradient2(low = "red", high = "blue", ,
name="Proportion of Correct Predictions") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 6))+
theme(axis.text.y = element_text(vjust = 1, hjust = 1, size = 6))+
theme(legend.position = "bottom") +
facet_grid(. ~ Predictor) +
coord_fixed()
ggplot(data= CorrectnessAgg, aes(x=Concurrent, y=Inducer, fill=Correctness)) +
geom_tile(color = "white") +
ggtitle("Proportion of Correct Predictions for each predictor set") +
scale_fill_gradient2(low = "red", high = "blue",
midpoint = 0.5, limit = c(0,1),
name="Proportion of Correct Predictions") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 6))+
theme(axis.text.y = element_text(vjust = 1, hjust = 1, size = 6))+
theme(legend.position = "bottom") +
facet_grid(. ~ Predictor) +
coord_fixed()
ggplot(data= CorrectnessAgg, aes(x=Concurrent, y=Inducer, fill=Correctness)) +
geom_tile(color = "white") +
ggtitle("Proportion of Correct Predictions for each predictor set") +
scale_fill_gradient2(low = "red", high = "blue",
limit = c(0,1),
name="Proportion of Correct Predictions") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 6))+
theme(axis.text.y = element_text(vjust = 1, hjust = 1, size = 6))+
theme(legend.position = "bottom") +
facet_grid(. ~ Predictor) +
coord_fixed()
ggplot(data= CorrectnessAgg, aes(x=Concurrent, y=Inducer, fill=Correctness)) +
geom_tile(color = "white") +
ggtitle("Proportion of Correct Predictions for each predictor set") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white",
midpoint = 0.5, limit = c(0,1),
name="Proportion of Correct Predictions") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 6))+
theme(axis.text.y = element_text(vjust = 1, hjust = 1, size = 6))+
theme(legend.position = "bottom") +
facet_grid(. ~ Predictor) +
coord_fixed()
View(CorrectnessData)
View(CorrectnessMolten)
View(CorrectnessAgg)
unique(CorrectnessAgg$Correctness)
RespModelID <- lmer(Resp ~ Comparison + 1|ID, data= dataAgg, family = binomial)
RespModelID <- lmer(Resp ~ Comparison + 1|Subject, data= dataAgg, family = binomial)
RespModelID <- lmer(Resp ~ Comparison + (1|Subject), data= dataAgg, family = binomial)
RespModelID <- glmer(Resp ~ Comparison + (1|Subject), data= dataAgg, family = binomial)
anova(RespModel)
summary(RespModel)
RespModel <- glm(Resp ~ Inducer * Concurrent , data= dataAgg, family = binomial)
anova(RespModel)
summary(RespModel)
library(tidyverse)
library(reshape2)
library(plyr)
library(doBy)
library(scales)
library(lmerTest)
CleanData <- read.csv("F:/Google Drive/GitHub Repos/Crossmodality-Toolkit/data/CleanData.csv")
simdata <- subset(CleanData, DataSet == "Simulated")
pilotdata <- subset(CleanData, DataSet == "Pilot")
RespData <- summaryBy(Response ~
Subject + DataSet + Condition +
Inducer + Concurrent + Comparison,
data= pilotdata, Fun = c(mean))
library(stats)
RespDataAgg <- aggregate(Response.mean ~ Inducer + Concurrent + Comparison, RespData, mean)
RespDataAgg$Resp2 <- rescale(RespDataAgg$Response.mean, to = c(-1, 1))
ggplot(data= RespDataAgg, aes(x=Concurrent, y=Inducer, fill=Resp2)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white",
midpoint = 0, limit = c(-1,1),
name="Association") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
coord_fixed()
Domains <- sort(unique(RespDataAgg$Inducer))
HighValues <- c("Excited/Bored", "Happy/Sad", "Pleased/Disgusted", "Stressed/Calm",
"Loud/Quiet", "Bright/Dark", "Red/Blue", "Red/Green", "Red/Yellow",
"Yellow/Blue", "Noisy/Tonal", "High Pitch/Low Pitch", "Jagged/Curvy",
"Large/Small", "Fast/Slow")
RespDataAgg$Inducer2 <- mapvalues(RespDataAgg$Inducer, from = Domains, to= HighValues)
RespDataAgg$Concurrent2 <- mapvalues(RespDataAgg$Concurrent, from = Domains, to= HighValues)
ggplot(data= RespDataAgg, aes(x=Concurrent2, y=Inducer2, fill=Resp2)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white",
midpoint = 0, limit = c(-1,1),
name="Association") +
theme_classic()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
coord_fixed()
RespDataAgg <- do.call(data.frame, aggregate(Response.mean ~ Inducer + Concurrent + Comparison,
RespData,
function(x) c(mean = mean(x), sd = sd(x))))
Domains <- sort(unique(RespDataAgg$Inducer))
HighValues <- c("Excited/Bored", "Happy/Sad", "Pleased/Disgusted", "Stressed/Calm",
"Loud/Quiet", "Bright/Dark", "Red/Blue", "Red/Green", "Red/Yellow",
"Yellow/Blue", "Noisy/Tonal", "High Pitch/Low Pitch", "Jagged/Curvy",
"Large/Small", "Fast/Slow")
RespDataAgg$Inducer2 <- mapvalues(RespDataAgg$Inducer, from = Domains, to= HighValues)
RespDataAgg$Concurrent2 <- mapvalues(RespDataAgg$Concurrent, from = Domains, to= HighValues)
library(powerAnalysis)
comparisons <- sort(unique(RespData$Comparison))
pvals <- list()
zvals <- list()
statvals <- list()
rm(comparison)
for(comparison in comparisons){
testdata <- subset(RespData, Comparison == comparison)
testres <- wilcox.test(testdata$Response.mean, mu= 0.5, alternative = "two.sided")
pval <- testres$p.value
pvals <- c(pvals, pval)
testZ <- qnorm(pval/2)
zvals <- c(zvals, testZ)
teststat <- abs(testZ / (sqrt(nrow(testdata))))
statvals <- c(statvals, teststat)
}
RespDataAgg$pValue <- as.numeric(pvals)
RespDataAgg$ZValue <- as.numeric(zvals)
RespDataAgg$effsize <- as.numeric(statvals)
#RespDataAgg$effsize <- ifelse(RespDataAgg$Response.mean.mean < 0.5,
#                              RespDataAgg$effsize * -1,
#                              RespDataAgg$effsize)
ggplot(data= RespDataAgg, aes(x=Concurrent2, y=Inducer2, fill=effsize)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "pink", high = "green", mid = "white", limit = c(-1,1),
name="Effect Size") +
geom_text(aes(label = round(effsize, 2)), size = 2) +
theme_classic()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))+
coord_fixed()
rm(comparison, comparisons, Domains, HighValues, pvals, statvals, testres, teststat, testZ, zvals, testdata, pval)
SimEff <- density(RespDataAgg$effsize)
plot(SimEff, main="Kernel Density of Effect Sizes")
polygon(SimEff, col= 'red', border= 'black')
View(RespDataAgg)
install.packages('pwr')
library(pwr.t.test)
library(pwr)
library(pwr)
pwrt.test(d= 0.34, sig = 0.00054, power = 0.9, type= "one.sample")
library(pwr)
pwr.t.test(d= 0.34, sig = 0.00054, power = 0.9, type= "one.sample")
library(pwr)
pwr.t.test(d= 0.34, sig = 0.00054, power = 0.9, type= "one.sample")
pwr.t.test(d= 0.34, sig = 0.05, power = 0.9, type= "one.sample")
library(pwr)
pwr.t.test(d= 0.34, sig = 0.00054, power = 0.9, type= "one.sample")
pwr.t.test(d= 0.34, sig = 0.05, power = 0.9, type= "one.sample")
pwr.t.test(d= 0.34, sig = 0.05, power = 0.8, type= "one.sample")
library(pwr)
pwr.t.test(d= 0.34, sig = 0.00054, power = 0.9, type= "one.sample")
pwr.t.test(d= 0.34, sig = 0.05, power = 0.9, type= "one.sample")
pwr.t.test(d= 0.34, sig = 0.00054, power = 0.8, type= "one.sample")
library(pwr)
pwr.t.test(d= 0.34, sig = 0.00054, power = 0.9, type= "one.sample")
pwr.t.test(d= 0.34, sig = 0.05, power = 0.9, type= "one.sample")
pwr.t.test(n = 100, d= 0.34, sig = 0.00054, type= "one.sample")
write.csv(RespDataAgg, "F:/Google Drive/GitHub Repos/Crossmodality-Toolkit/data/RespDataAgg.csv")
RespDataAgg <- read.csv("F:/Google Drive/GitHub Repos/Crossmodality-Toolkit/data/CleanData.csv")
a<- pwr.t.test(n = 100, d= 0.34, sig = 0.00054, type= "one.sample")
a
a$
n
View(RespDataAgg)
RespDataAgg <- read.csv("F:/Google Drive/GitHub Repos/Crossmodality-Toolkit/data/RespDataAgg.csv")
View(RespDataAgg)
RespDataAgg <- read.csv("F:/Google Drive/GitHub Repos/Crossmodality-Toolkit/data/RespDataAgg.csv")
RespDataSig <- subset(RespDataAgg, pValue > 0.05)
RespDataAgg <- read.csv("F:/Google Drive/GitHub Repos/Crossmodality-Toolkit/data/RespDataAgg.csv")
RespDataSig <- subset(RespDataAgg, pValue < 0.05)
View(RespDataSig)
comparisons <- sort(unique(RespDataSig$Comparison))
ReqN <- pwr.t.text(d = RespDataSig$effsize)
pwr.t.test(d = RespDataSig$effsize, sig = 0.00054, power = 0.9, type = "one.sample")
ReqN <- pwr.t.test(d = RespDataSig$effsize[row], sig = 0.00054, power = 0.9, type = "one.sample")
ReqN <- pwr.t.test(d = RespDataSig$effsize[1], sig = 0.00054, power = 0.9, type = "one.sample")
ReqN
RespDataAgg <- read.csv("F:/Google Drive/GitHub Repos/Crossmodality-Toolkit/data/RespDataAgg.csv")
RespDataSig <- subset(RespDataAgg, pValue < 0.05)
ReqNs <- list()
for(row in nrow(RespDataSig)){
pwrtest <- pwr.t.test(d = RespDataSig$effsize[row], sig = 0.00054, power = 0.9, type = "one.sample")
ReqN <- pwrtest$n
ReqNs <- c(ReqNs, ReqN)
}
RespDataAgg <- read.csv("F:/Google Drive/GitHub Repos/Crossmodality-Toolkit/data/RespDataAgg.csv")
RespDataSig <- subset(RespDataAgg, pValue < 0.05)
ReqNs <- list()
for(row in nrow(RespDataSig)){
pwrtest <- pwr.t.test(d = RespDataSig$effsize[row], sig = 0.00054, power = 0.9, type = "one.sample")
ReqN <- pwrtest$n
ReqNs <- c(ReqNs, ReqN)
}
pwrtest <- pwr.t.test(d = RespDataSig$effsize[4], sig = 0.00054, power = 0.9, type = "one.sample")
ReqN <- pwrtest$n
ReqNs <- c(ReqNs, ReqN)
RespDataAgg <- read.csv("F:/Google Drive/GitHub Repos/Crossmodality-Toolkit/data/RespDataAgg.csv")
RespDataSig <- subset(RespDataAgg, pValue < 0.05)
ReqNs <- list()
for(i in 1:nrow(RespDataSig)){
pwrtest <- pwr.t.test(d = RespDataSig$effsize[i], sig = 0.00054, power = 0.9, type = "one.sample")
ReqN <- pwrtest$n
ReqNs <- c(ReqNs, ReqN)
}
RespDataAgg <- read.csv("F:/Google Drive/GitHub Repos/Crossmodality-Toolkit/data/RespDataAgg.csv")
RespDataSig <- subset(RespDataAgg, pValue < 0.05)
ReqNs <- list()
for(i in 1:nrow(RespDataSig)){
pwrtest <- pwr.t.test(d = RespDataSig$effsize[i], sig = 0.00054, power = 0.9, type = "one.sample")
ReqN <- pwrtest$n
ReqNs <- c(ReqNs, ReqN)
}
RespDataSig$ReqN <- as.numeric(ReqNs)
View(RespDataSig)
RespDataAgg <- read.csv("F:/Google Drive/GitHub Repos/Crossmodality-Toolkit/data/RespDataAgg.csv")
RespDataSig <- subset(RespDataAgg, pValue < 0.05)
ReqNs <- list()
for(i in 1:nrow(RespDataSig)){
pwrtest <- pwr.t.test(d = RespDataSig$effsize[i], sig = 0.00054, power = 0.9, type = "one.sample")
ReqN <- pwrtest$n
ReqNs <- c(ReqNs, ReqN)
}
RespDataSig$ReqN <- as.numeric(ReqNs)
mean(ReqNs)
sd(ReqNs)
RespDataAgg <- read.csv("F:/Google Drive/GitHub Repos/Crossmodality-Toolkit/data/RespDataAgg.csv")
RespDataSig <- subset(RespDataAgg, pValue < 0.05)
ReqNs <- list()
for(i in 1:nrow(RespDataSig)){
pwrtest <- pwr.t.test(d = RespDataSig$effsize[i], sig = 0.00054, power = 0.9, type = "one.sample")
ReqN <- pwrtest$n
ReqNs <- c(ReqNs, ReqN)
}
RespDataSig$ReqN <- as.numeric(ReqNs)
mean(RespDataSig$ReqN)
sd(RespDataSig$ReqN)
range(RespDataSig$ReqN)
createstimuli <- function() {
ColourTokens <- c("RG", "RY", "YB", "RB")
Inducers <- expand.grid(Inducer = ColourTokens, Concurrent = Domains)        #1 - Create relevant combinations
Concurrents <- expand.grid(Inducer = Domains, Concurrent = ColourTokens)
Inducers <- Inducers[order(Inducers$Concurrent),]
Concurrents <- Concurrents[order(Concurrents$Inducer),]
NonFocalTokens <-c(sapply(Domains, function(d) sample(Tokens[[d]], 1)))   #2 Assign tokens for non-focal domains
Inducers$ConcurrentToken <- rep(NonFocalTokens, each=4)
Concurrents$InducerToken <- rep(NonFocalTokens, each=4)
Inducers$InducerToken <- Inducers$Inducer
Concurrents$ConcurrentToken <- Concurrents$Concurrent
Inducers$Inducer <- "Colour"
Concurrents$Concurrent <- "Colour"
TrialList <- rbind(Inducers, Concurrents)                       #Randomize trial type
TrialList$TrialType <- rep(sample(1:4),16)
TrialList$Focal1 <- "Colour"
TrialList$InducerL <- mapvalues(TrialList$TrialType,
from = c(1, 2, 3, 4),
to = c("H", "H", "L", "L"))
TrialList$InducerR <- mapvalues(TrialList$TrialType,
from = c(1, 2, 3, 4),
to = c("L", "L", "H", "H"))     #4 Assign locations for all stims
TrialList$ConcurrentL <- mapvalues(TrialList$TrialType,
from = c(1, 2, 3, 4),
to = c("H", "L", "H", "L"))
TrialList$ConcurrentR <- mapvalues(TrialList$TrialType,
from = c(1, 2, 3, 4),
to = c("L", "H", "L", "H"))
TrialList$InducerL <- with(TrialList, paste(Inducer, InducerToken, InducerL, sep = '-'))
TrialList$InducerR <- with(TrialList, paste(Inducer, InducerToken, InducerR, sep = '-'))
TrialList$ConcurrentL <- with(TrialList, paste(Concurrent, ConcurrentToken, ConcurrentL, sep = '-'))
TrialList$ConcurrentR <- with(TrialList, paste(Concurrent, ConcurrentToken, ConcurrentR, sep = '-'))
TrialList <- TrialList[sample(nrow(TrialList)), ]                   #5 Shuffle the order of trials
TrialList$TrialNum <- seq(nrow(TrialList))
TrialList <- subset(TrialList, select=c("TrialNum", "Focal1", "Inducer", "Concurrent", "TrialType",
"InducerL", "InducerR", "ConcurrentL", "ConcurrentR"))
########################
# Finally just a bit of cleanup
return(TrialList)
}
library(tidyr) # for unite()
library(magrittr) # for pipe (%>%)
library(plyr)
Tokens <- list(Pitch = c("Hum", "Piano", "Pulse", "Tone"),
Amp = c("Hum", "Piano", "Pulse", "Tone"),
Noise = c("Hum", "Piano", "Pulse", "Tone"),
Shape = c("BK1", "BK2", "BK3", "BK4"),
Size = c("Circles", "Squares", "Triangles", "Diamonds"),
Brightness = c("Circles", "Squares", "Triangles", "Diamonds"),
Color = c("RG", "RY", "YB", "RB"),
Speed = c("SP1", "SP2", "SP3", "SP4"))
Domains <- names(Tokens)
Domains
Tokens <- list(Pitch = c("Hum", "Piano", "Pulse", "Tone"),
Amp = c("Hum", "Piano", "Pulse", "Tone"),
Noise = c("Hum", "Piano", "Pulse", "Tone"),
Shape = c("BK1", "BK2", "BK3", "BK4"),
Size = c("Circles", "Squares", "Triangles", "Diamonds"),
Brightness = c("Circles", "Squares", "Triangles", "Diamonds"),
Affect = c("EB", "HS", "PD", "SC"),
Speed = c("SP1", "SP2", "SP3", "SP4"))
Domains <- names(Tokens)
createstimuli <- function() {
ColourTokens <- c("RG", "RY", "YB", "RB")
Inducers <- expand.grid(Inducer = ColourTokens, Concurrent = Domains)        #1 - Create relevant combinations
Concurrents <- expand.grid(Inducer = Domains, Concurrent = ColourTokens)
Inducers <- Inducers[order(Inducers$Concurrent),]
Concurrents <- Concurrents[order(Concurrents$Inducer),]
NonFocalTokens <-c(sapply(Domains, function(d) sample(Tokens[[d]], 1)))   #2 Assign tokens for non-focal domains
Inducers$ConcurrentToken <- rep(NonFocalTokens, each=4)
Concurrents$InducerToken <- rep(NonFocalTokens, each=4)
Inducers$InducerToken <- Inducers$Inducer
Concurrents$ConcurrentToken <- Concurrents$Concurrent
Inducers$Inducer <- "Colour"
Concurrents$Concurrent <- "Colour"
TrialList <- rbind(Inducers, Concurrents)                       #Randomize trial type
TrialList$TrialType <- rep(sample(1:4),16)
TrialList$Focal1 <- "Colour"
TrialList$InducerL <- mapvalues(TrialList$TrialType,
from = c(1, 2, 3, 4),
to = c("H", "H", "L", "L"))
TrialList$InducerR <- mapvalues(TrialList$TrialType,
from = c(1, 2, 3, 4),
to = c("L", "L", "H", "H"))     #4 Assign locations for all stims
TrialList$ConcurrentL <- mapvalues(TrialList$TrialType,
from = c(1, 2, 3, 4),
to = c("H", "L", "H", "L"))
TrialList$ConcurrentR <- mapvalues(TrialList$TrialType,
from = c(1, 2, 3, 4),
to = c("L", "H", "L", "H"))
TrialList$InducerL <- with(TrialList, paste(Inducer, InducerToken, InducerL, sep = '-'))
TrialList$InducerR <- with(TrialList, paste(Inducer, InducerToken, InducerR, sep = '-'))
TrialList$ConcurrentL <- with(TrialList, paste(Concurrent, ConcurrentToken, ConcurrentL, sep = '-'))
TrialList$ConcurrentR <- with(TrialList, paste(Concurrent, ConcurrentToken, ConcurrentR, sep = '-'))
TrialList <- TrialList[sample(nrow(TrialList)), ]                   #5 Shuffle the order of trials
TrialList$TrialNum <- seq(nrow(TrialList))
TrialList <- subset(TrialList, select=c("TrialNum", "Focal1", "Inducer", "Concurrent", "TrialType",
"InducerL", "InducerR", "ConcurrentL", "ConcurrentR"))
########################
# Finally just a bit of cleanup
return(TrialList)
}
writestimuli <- function(n, conditionname= "Colour") {
# do n times, storing the current iteration number in 'i'
for (i in 1:n) {
# create stimuli data frame. 'dimensions' is already in the right format so
# just pass it on directly
stimuli <- createstimuli()
# add participant 'Id' column (concatenation of the conditionname and 'i')
stimuli <- cbind(Id=paste(conditionname, i, sep="-"), stimuli)
# write resulting data frame to a file
write.table(stimuli,
paste("F:/GitHub Repos/Crossmodality-Toolkit/Stimuli/Stimlists/Colour/", "Stimuli-", conditionname, "-", i, ".csv", sep=""),
sep = "\t", row.names=FALSE)
}
}
writestimuli(60)
writestimuli(60)
library(tidyr) # for unite()
library(magrittr) # for pipe (%>%)
library(plyr)
Tokens <- list(Pitch = c("Hum", "Piano", "Pulse", "Tone"),
Amp = c("Hum", "Piano", "Pulse", "Tone"),
Noise = c("Hum", "Piano", "Pulse", "Tone"),
Shape = c("BK1", "BK2", "BK3", "BK4"),
Size = c("Circles", "Squares", "Triangles", "Diamonds"),
Brightness = c("Circles", "Squares", "Triangles", "Diamonds"),
Affect = c("EB", "HS", "PD", "SC"),
Speed = c("SP1", "SP2", "SP3", "SP4"))
Domains <- names(Tokens)
createstimuli <- function() {
colorTokens <- c("RG", "RY", "YB", "RB")
Inducers <- expand.grid(Inducer = colorTokens, Concurrent = Domains)        #1 - Create relevant combinations
Concurrents <- expand.grid(Inducer = Domains, Concurrent = colorTokens)
Inducers <- Inducers[order(Inducers$Concurrent),]
Concurrents <- Concurrents[order(Concurrents$Inducer),]
NonFocalTokens <-c(sapply(Domains, function(d) sample(Tokens[[d]], 1)))   #2 Assign tokens for non-focal domains
Inducers$ConcurrentToken <- rep(NonFocalTokens, each=4)
Concurrents$InducerToken <- rep(NonFocalTokens, each=4)
Inducers$InducerToken <- Inducers$Inducer
Concurrents$ConcurrentToken <- Concurrents$Concurrent
Inducers$Inducer <- "color"
Concurrents$Concurrent <- "color"
TrialList <- rbind(Inducers, Concurrents)                       #Randomize trial type
TrialList$TrialType <- rep(sample(1:4),16)
TrialList$Focal1 <- "color"
TrialList$InducerL <- mapvalues(TrialList$TrialType,
from = c(1, 2, 3, 4),
to = c("H", "H", "L", "L"))
TrialList$InducerR <- mapvalues(TrialList$TrialType,
from = c(1, 2, 3, 4),
to = c("L", "L", "H", "H"))     #4 Assign locations for all stims
TrialList$ConcurrentL <- mapvalues(TrialList$TrialType,
from = c(1, 2, 3, 4),
to = c("H", "L", "H", "L"))
TrialList$ConcurrentR <- mapvalues(TrialList$TrialType,
from = c(1, 2, 3, 4),
to = c("L", "H", "L", "H"))
TrialList$InducerL <- with(TrialList, paste(Inducer, InducerToken, InducerL, sep = '-'))
TrialList$InducerR <- with(TrialList, paste(Inducer, InducerToken, InducerR, sep = '-'))
TrialList$ConcurrentL <- with(TrialList, paste(Concurrent, ConcurrentToken, ConcurrentL, sep = '-'))
TrialList$ConcurrentR <- with(TrialList, paste(Concurrent, ConcurrentToken, ConcurrentR, sep = '-'))
TrialList <- TrialList[sample(nrow(TrialList)), ]                   #5 Shuffle the order of trials
TrialList$TrialNum <- seq(nrow(TrialList))
TrialList <- subset(TrialList, select=c("TrialNum", "Focal1", "Inducer", "Concurrent", "TrialType",
"InducerL", "InducerR", "ConcurrentL", "ConcurrentR"))
########################
# Finally just a bit of cleanup
return(TrialList)
}
writestimuli <- function(n, conditionname= "color") {
# do n times, storing the current iteration number in 'i'
for (i in 1:n) {
# create stimuli data frame. 'dimensions' is already in the right format so
# just pass it on directly
stimuli <- createstimuli()
# add participant 'Id' column (concatenation of the conditionname and 'i')
stimuli <- cbind(Id=paste(conditionname, i, sep="-"), stimuli)
# write resulting data frame to a file
write.table(stimuli,
paste("F:/GitHub Repos/Crossmodality-Toolkit/Stimuli/Stimlists/color/", "Stimuli-", conditionname, "-", i, ".csv", sep=""),
sep = "\t", row.names=FALSE)
}
}
writestimuli(60)
Tokens <- list(Pitch = c("Hum", "Piano", "Pulse", "Tone"),
Amp = c("Hum", "Piano", "Pulse", "Tone"),
Noise = c("Hum", "Piano", "Pulse", "Tone"),
Shape = c("BK1", "BK2", "BK3", "BK4"),
Size = c("Circles", "Squares", "Triangles", "Diamonds"),
Brightness = c("Circles", "Squares", "Triangles", "Diamonds"),
Affect = c("EB", "HS", "PD", "SC"),
Speed = c("SP1", "SP2", "SP3", "SP4"))
Domains <- names(Tokens)
createstimuli <- function() {
ColorTokens <- c("RG", "RY", "YB", "RB")
Inducers <- expand.grid(Inducer = ColorTokens, Concurrent = Domains)        #1 - Create relevant combinations
Concurrents <- expand.grid(Inducer = Domains, Concurrent = ColorTokens)
Inducers <- Inducers[order(Inducers$Concurrent),]
Concurrents <- Concurrents[order(Concurrents$Inducer),]
NonFocalTokens <-c(sapply(Domains, function(d) sample(Tokens[[d]], 1)))   #2 Assign tokens for non-focal domains
Inducers$ConcurrentToken <- rep(NonFocalTokens, each=4)
Concurrents$InducerToken <- rep(NonFocalTokens, each=4)
Inducers$InducerToken <- Inducers$Inducer
Concurrents$ConcurrentToken <- Concurrents$Concurrent
Inducers$Inducer <- "Color"
Concurrents$Concurrent <- "Color"
TrialList <- rbind(Inducers, Concurrents)                       #Randomize trial type
TrialList$TrialType <- rep(sample(1:4),16)
TrialList$Focal1 <- "Color"
TrialList$InducerL <- mapvalues(TrialList$TrialType,
from = c(1, 2, 3, 4),
to = c("H", "H", "L", "L"))
TrialList$InducerR <- mapvalues(TrialList$TrialType,
from = c(1, 2, 3, 4),
to = c("L", "L", "H", "H"))     #4 Assign locations for all stims
TrialList$ConcurrentL <- mapvalues(TrialList$TrialType,
from = c(1, 2, 3, 4),
to = c("H", "L", "H", "L"))
TrialList$ConcurrentR <- mapvalues(TrialList$TrialType,
from = c(1, 2, 3, 4),
to = c("L", "H", "L", "H"))
TrialList$InducerL <- with(TrialList, paste(Inducer, InducerToken, InducerL, sep = '-'))
TrialList$InducerR <- with(TrialList, paste(Inducer, InducerToken, InducerR, sep = '-'))
TrialList$ConcurrentL <- with(TrialList, paste(Concurrent, ConcurrentToken, ConcurrentL, sep = '-'))
TrialList$ConcurrentR <- with(TrialList, paste(Concurrent, ConcurrentToken, ConcurrentR, sep = '-'))
TrialList <- TrialList[sample(nrow(TrialList)), ]                   #5 Shuffle the order of trials
TrialList$TrialNum <- seq(nrow(TrialList))
TrialList <- subset(TrialList, select=c("TrialNum", "Focal1", "Inducer", "Concurrent", "TrialType",
"InducerL", "InducerR", "ConcurrentL", "ConcurrentR"))
########################
# Finally just a bit of cleanup
return(TrialList)
}
writestimuli <- function(n, conditionname= "Color") {
# do n times, storing the current iteration number in 'i'
for (i in 1:n) {
# create stimuli data frame. 'dimensions' is already in the right format so
# just pass it on directly
stimuli <- createstimuli()
# add participant 'Id' column (concatenation of the conditionname and 'i')
stimuli <- cbind(Id=paste(conditionname, i, sep="-"), stimuli)
# write resulting data frame to a file
write.table(stimuli,
paste("F:/GitHub Repos/Crossmodality-Toolkit/Stimuli/Stimlists/Color/", "Stimuli-", conditionname, "-", i, ".csv", sep=""),
sep = "\t", row.names=FALSE)
}
}
writestimuli(60)
